const gulp = require('gulp')
const rename = require('gulp-rename')
const defineModule = require('gulp-define-module')
const precompileHandlebars = require('./core/plugins/precompile-handlebars')
const runSequence = require('run-sequence')
const fs = require('fs')
const path = require('path')

gulp.task('default', (done) => {
  return runSequence(
    'prebuild',
    'copy-to-public',
    done
  )
})

gulp.task('prebuild', (done) => {
  return runSequence(
    'precompile-handlebars',
    'precompile-partials',
    'auto-generate-fragments',
    done
  )
})

gulp.task('precompile-handlebars', () => {
  return gulp.src('src/pages/**/*.hbs')
    .pipe(precompileHandlebars())
    .pipe(rename({ basename: 'template', extname: '.js' }))
    .pipe(defineModule('es6'))
    .pipe(gulp.dest('src/pages'))
})

gulp.task('precompile-partials', () => {
  return gulp.src('src/partials/**/*.hbs')
    .pipe(precompileHandlebars())
    .pipe(rename({ basename: 'template', extname: '.js' }))
    .pipe(defineModule('es6'))
    .pipe(gulp.dest('src/partials'))
})

gulp.task('auto-generate-fragments', (done) => {
  const config = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'src/config.json'), 'utf8'))
  var fragment = '// Autogenerated file. Do not edit directly.\n\nexport default { routing: { '
  for (var r in config.routing) {
    var page = config.routing[r].page || config.routing[r]
    fragment += `'${r}': { page: () => { return System.import('../../${page}/dependency.js') }, `
    fragment += `header: ${config.routing[r].header ? `() => { return System.import('../../${config.partials.header}/dependency.js') }` : `() => { return Promise.resolve('default') }`}, `
    fragment += `footer: ${config.routing[r].footer ? `() => { return System.import('../../${config.partials.footer}/dependency.js') }` : `() => { return Promise.resolve('default') }`} },`
  }
  fragment = fragment.slice(0, -1)
  fragment += `}, httpCodes: {`
  for (var h in config.httpCodes) {
    var code = config.httpCodes[h].page || config.httpCodes[h]
    fragment += `'${h}': { page: () => { return System.import('../../${code}/dependency.js') }, `
    fragment += `header: ${config.httpCodes[h].header ? `() => { return System.import('../../${config.partials.header}/dependency.js') }` : `() => { return Promise.resolve('default') }`}, `
    fragment += `footer: ${config.httpCodes[h].footer ? `() => { return System.import('../../${config.partials.footer}/dependency.js') }` : `() => { return Promise.resolve('default') }`} },`
  }
  fragment = fragment.slice(0, -1)
  fragment += `}, partials: {`
  for (var p in config.default) {
    var partial = config.default[p]
    fragment += `'${p}': () => { return System.import('../../${partial}/dependency.js') },`
  }
  fragment = fragment.slice(0, -1)
  fragment += '}}'
  fs.writeFileSync(path.resolve(__dirname, 'core/utils/fragments.js'), fragment, 'utf8')
  done()
})

gulp.task('copy-to-public', () => {
  return gulp.src(['./core/dist/**'])
    .pipe(gulp.dest('../public'))
})

gulp.task('watch', (done) => {
  return runSequence(
    'default',
    'watch-only',
    done
  )
})

gulp.task('watch-only', () => {
  gulp.watch('src/pages/**/*.hbs', ['precompile-handlebars'])
  gulp.watch('src/partials/**/*.hbs', ['precompile-partials'])
  gulp.watch(['src/pages/**/*.js', 'src/partials/**/*.js'], ['auto-generate-fragments'])
  gulp.watch('core/dist/**', ['copy-to-public'])
})
